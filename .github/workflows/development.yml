name: Development workflow

on: [push]

jobs:

  build:
    name: Run Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest] # macos-latest
        include:
          - os: ubuntu-latest
            target: linux
          - os: windows-latest
            target: win
          # - os: macos-latest
          #   target: osx
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Fetch all history for all tags and branches
      run: |
        git config remote.origin.url https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
        git fetch --prune --unshallow

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.7
      with:
          versionSpec: '5.x'

    - name: Use GitVersion
      id: gitversion # step id used as reference for output values
      uses: gittools/actions/gitversion/execute@v0.9.7

    # - run: |
    #     echo "Major: ${{ steps.gitversion.outputs.major }}"
    #     echo "Minor: ${{ steps.gitversion.outputs.minor }}"
    #     echo "Patch: ${{ steps.gitversion.outputs.patch }}"
    #     echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
    #     echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
    #     echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
    #     echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
    #     echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
    #     echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"
    #     echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.buildMetaDataPadded }}"
    #     echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
    #     echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
    #     echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
    #     echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
    #     echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.legacySemVerPadded }}"
    #     echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
    #     echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
    #     echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
    #     echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
    #     echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
    #     echo "Sha: ${{ steps.gitversion.outputs.sha }}"
    #     echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"
    #     echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
    #     echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
    #     echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"
    #     echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"
    #     echo "VersionSourceSha: ${{ steps.gitversion.outputs.versionSourceSha }}"
    #     echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
    #     echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"
    #     echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"

    - name: Setup .NET Core
      uses: actions/setup-dotnet@master
      with:
        dotnet-version: 5.0.x
      env:
        DOTNET_NOLOGO: true
        DOTNET_CLI_TELEMETRY_OPTOUT: true
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true


    - name: Setup NPM
      uses: actions/setup-node@v2-beta
      with:
        node-version: '10'

    - name: Build .NET solution
      env:
        DOTNET_NOLOGO: true
        DOTNET_CLI_TELEMETRY_OPTOUT: true
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
        SemVer: ${{ steps.gitversion.outputs.semVer }} #let dotnet publish pick this up as a build parameter
      run: |
        dotnet --version
        dotnet tool install ElectronNET.CLI -g
        dotnet build ./blazor-electron-sample.sln --configuration Release

    - name: Build Electron artifact
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SemVer: ${{ steps.gitversion.outputs.semVer }} #let dotnet publish pick this up as a build parameter
      run: |
        npm install
        electronize build /target ${{matrix.target}} /PublishSingleFile false /PublishReadyToRun false /electron-params "-c.extraMetadata.version=${{ steps.gitversion.outputs.semVer }} -c.extraMetadata.buildVersion=${{ steps.gitversion.outputs.assemblySemFileVer }}"

    - name: Upload Artifact
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-artifact@v2
      with:
        name: blazor-electron-sample-${{matrix.target}}-${{steps.gitversion.outputs.semVer}}
        path: "bin/[Dd]esktop/\n!bin/[Dd]esktop/*unpacked/"

    # - name: Test .NET solution
    #   env:
    #     DOTNET_CLI_TELEMETRY_OPTOUT: 1
    #     DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    #   run: |
    #     dotnet --version
    #     dotnet test ./blazor-electron-sample.sln --configuration Release

  release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Use GitVersion
        id: gitversion # step id used as reference for output values
        uses: gittools/actions/gitversion/execute@v0.9.7

      - name: Build Changelog
        id: github_release
        uses: mikepenz/release-changelog-builder-action@main
        with:
          configuration: ".github/workflows/CHANGELOG_TEMPLATE.json"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish Release
        uses: actions/create-release@v1
        id: create_release
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: |
            ${{steps.github_release.outputs.changelog}}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/download-artifact@v2
        with:
          name: blazor-electron-sample-linux-${{steps.gitversion.outputs.semVer}}
          path: artifacts

      - name: Upload Release Asset Linux
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./artifacts/blazor-electron-sample-linux-${{steps.gitversion.outputs.semVer}}.zip
          asset_name: blazor-electron-sample-linux-${{steps.gitversion.outputs.semVer}}.zip
          asset_content_type: application/zip

      - name: Upload Release Asset Windows
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./artifacts/blazor-electron-sample-win-${{steps.gitversion.outputs.semVer}}.zip
          asset_name: blazor-electron-sample-win-${{steps.gitversion.outputs.semVer}}.zip
          asset_content_type: application/zip