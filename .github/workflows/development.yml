name: Development workflow

on: [push]

jobs:

  build:
    name: Run Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest] # macos-latest
        include:
          - os: ubuntu-latest
            target: linux
          - os: windows-latest
            target: win
          # - os: macos-latest
          #   target: osx
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Fetch all history for all tags and branches
      run: |
        git config remote.origin.url https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
        git fetch --prune --unshallow

    - name: Setup .NET Core
      uses: actions/setup-dotnet@master
      with:
        dotnet-version: 6.0.x
      env:
        DOTNET_NOLOGO: true
        DOTNET_CLI_TELEMETRY_OPTOUT: true
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.9
      with:
          versionSpec: '5.x'
      env:
        DOTNET_NOLOGO: true
        DOTNET_CLI_TELEMETRY_OPTOUT: true
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
        DOTNET_SYSTEM_GLOBALIZATION_INVARIANT: true
        DOTNET_ROLL_FORWARD: Major

    - name: Use GitVersion
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.9.9
      env:
        DOTNET_NOLOGO: true
        DOTNET_CLI_TELEMETRY_OPTOUT: true
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
        DOTNET_ROLL_FORWARD: Major

    - name: Setup NPM
      uses: actions/setup-node@v2-beta
      with:
        node-version: '16'

    - name: Build .NET solution
      env:
        DOTNET_NOLOGO: true
        DOTNET_CLI_TELEMETRY_OPTOUT: true
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
        SemVer: ${{ steps.gitversion.outputs.semVer }} #let dotnet publish pick this up as a build parameter
      run: |
        dotnet --version
        dotnet tool install ElectronNET.CLI -g
        dotnet build ./blazor-electron-sample.sln --configuration Release

    - name: Build Electron artifact
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DOTNET_ROLL_FORWARD: Major
        SemVer: ${{ steps.gitversion.outputs.semVer }} #let dotnet publish pick this up as a build parameter
      run: |
        npm install
        electronize build /target ${{matrix.target}} /PublishSingleFile false /PublishReadyToRun false /electron-params "-c.extraMetadata.version=${{ steps.gitversion.outputs.semVer }} -c.extraMetadata.buildVersion=${{ steps.gitversion.outputs.assemblySemFileVer }}"

    - name: Upload Artifact
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-artifact@v2
      with:
        name: blazor-electron-sample-${{matrix.target}}-${{steps.gitversion.outputs.semVer}}
        path: "bin/[Dd]esktop/\n!bin/[Dd]esktop/*unpacked/\n!bin/[Dd]esktop/*.blockmap"

    # - name: Test .NET solution
    #   env:
    #     DOTNET_CLI_TELEMETRY_OPTOUT: 1
    #     DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    #   run: |
    #     dotnet --version
    #     dotnet test ./blazor-electron-sample.sln --configuration Release

  release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      # - name: Use GitVersion
      #   id: gitversion # step id used as reference for output values
      #   uses: gittools/actions/gitversion/execute@v0.9.7

      - name: Build Changelog
        id: github_release
        uses: mikepenz/release-changelog-builder-action@main
        with:
          configuration: ".github/workflows/CHANGELOG_TEMPLATE.json"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish Release
        uses: actions/create-release@v1
        id: create_release
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: |
            ${{steps.github_release.outputs.changelog}}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Upload Release Assets
        id: upload-release-assets
        uses: dwenegar/upload-release-assets@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.create_release.outputs.id }}
          assets_path: artifacts