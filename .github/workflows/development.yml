name: Development workflow

on: [push]

jobs:

  build:
    name: Run Build on ${{ matrix.cfg.os }}
    runs-on: ${{ matrix.cfg.os }}
    strategy:
      matrix:
        cfg:
          - { target: linux, os: ubuntu-latest   }
          - { target: win   , os: windows-latest }
          #- { target: osx   , os: macOS-latest }
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Fetch all history for all tags and branches
      run: |
        git config remote.origin.url https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
        git fetch --prune --unshallow

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.2
      with:
          versionSpec: '5.2.x'

    - name: Use GitVersion
      id: gitversion # step id used as reference for output values
      uses: gittools/actions/gitversion/execute@v0.9.2

    # - run: |
    #     echo "Major: ${{ steps.gitversion.outputs.major }}"
    #     echo "Minor: ${{ steps.gitversion.outputs.minor }}"
    #     echo "Patch: ${{ steps.gitversion.outputs.patch }}"
    #     echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
    #     echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
    #     echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
    #     echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
    #     echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
    #     echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"
    #     echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.buildMetaDataPadded }}"
    #     echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
    #     echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
    #     echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
    #     echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
    #     echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.legacySemVerPadded }}"
    #     echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
    #     echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
    #     echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
    #     echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
    #     echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
    #     echo "Sha: ${{ steps.gitversion.outputs.sha }}"
    #     echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"
    #     echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
    #     echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
    #     echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"
    #     echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"
    #     echo "VersionSourceSha: ${{ steps.gitversion.outputs.versionSourceSha }}"
    #     echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
    #     echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"
    #     echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"

    - name: Setup .NET Core
      uses: actions/setup-dotnet@master
      with:
        dotnet-version: 3.1.x
      env:
        DOTNET_NOLOGO: true
        DOTNET_CLI_TELEMETRY_OPTOUT: true
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true


    - name: Setup NPM
      uses: actions/setup-node@v2-beta
      with:
        node-version: '10'

    - name: Build .NET solution
      env:
        DOTNET_NOLOGO: true
        DOTNET_CLI_TELEMETRY_OPTOUT: true
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
        SemVer: ${{ steps.gitversion.outputs.semVer }}
      run: |
        dotnet --version
        dotnet tool install ElectronNET.CLI -g
        dotnet build ./blazor-electron-sample.sln --configuration Release

    - name: Build Electron artifact
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SemVer: ${{ steps.gitversion.outputs.semVer }}
      run: |
        npm install
        electronize build /target ${{matrix.cfg.target}} /electron-params "-c.extraMetadata.version=${{ steps.gitversion.outputs.semVer }} -c.extraMetadata.buildVersion=${{ steps.gitversion.outputs.assemblySemFileVer }}"

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: blazor-electron-sample-${{matrix.cfg.target}}-${{steps.gitversion.outputs.semVer}}
        path: "bin/[Dd]esktop/\n!bin/[Dd]esktop/*unpacked/"

    # - name: Test .NET solution
    #   env:
    #     DOTNET_CLI_TELEMETRY_OPTOUT: 1
    #     DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    #   run: |
    #     dotnet --version
    #     dotnet test ./blazor-electron-sample.sln --configuration Release